diff -u -r -b cups-filters-1.0.66.org/filter/pdftoijs.cxx cups-filters-1.0.66/filter/pdftoijs.cxx
--- cups-filters-1.0.66.org/filter/pdftoijs.cxx	2015-02-28 01:50:43.000000000 +0800
+++ cups-filters-1.0.66/filter/pdftoijs.cxx	2015-05-04 12:54:50.000000000 +0800
@@ -512,22 +512,22 @@
 
 /* replace memory allocation methods for memory check */
 
-void * operator new(size_t size) throw (std::bad_alloc)
+void * operator new(size_t size) _GLIBCXX_THROW(std::bad_alloc)
 {
   return gmalloc(size);
 }
 
-void operator delete(void *p) throw ()
+void operator delete(void *p) _GLIBCXX_USE_NOEXCEPT
 {
   gfree(p);
 }
 
-void * operator new[](size_t size) throw (std::bad_alloc)
+void * operator new[](size_t size) _GLIBCXX_THROW(std::bad_alloc)
 {
   return gmalloc(size);
 }
 
-void operator delete[](void *p) throw ()
+void operator delete[](void *p) _GLIBCXX_USE_NOEXCEPT
 {
   gfree(p);
 }
diff -u -r -b cups-filters-1.0.66.org/filter/pdftoopvp/pdftoopvp.cxx cups-filters-1.0.66/filter/pdftoopvp/pdftoopvp.cxx
--- cups-filters-1.0.66.org/filter/pdftoopvp/pdftoopvp.cxx	2015-02-28 01:50:43.000000000 +0800
+++ cups-filters-1.0.66/filter/pdftoopvp/pdftoopvp.cxx	2015-05-04 12:52:44.000000000 +0800
@@ -770,13 +770,13 @@
 }
 
 /* for memory debug */
-void *operator new(size_t size) throw (std::bad_alloc)
+void *operator new(size_t size) _GLIBCXX_THROW(std::bad_alloc)
 {
     void *p = malloc(size);
     return p;
 }
 
-void operator delete(void *p) throw ()
+void operator delete(void *p) _GLIBCXX_USE_NOEXCEPT
 {
     free(p);
 }
diff -u -r -b cups-filters-1.0.66.org/filter/pdftoraster.cxx cups-filters-1.0.66/filter/pdftoraster.cxx
--- cups-filters-1.0.66.org/filter/pdftoraster.cxx	2015-02-28 01:50:43.000000000 +0800
+++ cups-filters-1.0.66/filter/pdftoraster.cxx	2015-05-04 12:56:53.000000000 +0800
@@ -2147,22 +2147,22 @@
 
 /* replace memory allocation methods for memory check */
 
-void * operator new(size_t size) throw (std::bad_alloc)
+void * operator new(size_t size) _GLIBCXX_THROW(std::bad_alloc)
 {
   return gmalloc(size);
 }
 
-void operator delete(void *p) throw ()
+void operator delete(void *p) _GLIBCXX_USE_NOEXCEPT
 {
   gfree(p);
 }
 
-void * operator new[](size_t size) throw (std::bad_alloc)
+void * operator new[](size_t size) _GLIBCXX_THROW(std::bad_alloc)
 {
   return gmalloc(size);
 }
 
-void operator delete[](void *p) throw ()
+void operator delete[](void *p) _GLIBCXX_USE_NOEXCEPT
 {
   gfree(p);
 }
